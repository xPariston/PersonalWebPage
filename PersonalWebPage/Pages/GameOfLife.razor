@page "/gameoflife"
@using ViewModels
@using GameOfLifeLibary.GameForms.GameOfLifeTypes

<h1>Game of Life</h1>
<div>
    <span>
        <button name="BtnGeneratePopulation" @onclick="viewModel.BtnGeneratePopulationClick">Generate</button>
        <button name="BtnStartSimulation" @onclick="viewModel.BtnStartSimulationClick">Start</button>
        <button name="BtnStopSimulation" @onclick="viewModel.BtnStopSimulationClick">Stop</button>
        <button name="BtnStepSimulation" @onclick="viewModel.BtnStepSimulationClick">Step</button>
    </span>
</div>
<div>
    <span>
        <span>
            <span>Length:</span>
            <button name="BtnDecrementLength" @onclick="viewModel.BtnDecrementLength">-</button>
            <span>@viewModel.tempLength</span>
            <button name="BtnIncrementLength" @onclick="viewModel.BtnIncrementLength">+</button>
        </span>
        <span>
            <span>Width:</span>
            <button name="BtnDecrementWidth" @onclick="viewModel.BtnDecrementWidth">-</button>
            <span>@viewModel.tempWidth</span>
            <button name="BtnIncrementLength" @onclick="viewModel.BtnIncrementWidth">+</button>
        </span>
        <span>
            <span>Starting Points:</span>
            <button name="BtnDecrementStartingPoints" @onclick="viewModel.BtnDecrementStartingPopulation">-</button>
            <span>@viewModel.StartingPopulation</span>
            <button name="BtnIncrementStartingPoints" @onclick="viewModel.BtnIncrementStartingPopulation">+</button>
        </span>
    </span>
</div>
<div>
    <span>
        <label>Form Simulation: </label>
        <select @bind="viewModel.SelectedType">
            @foreach (FormTypes formType in (FormTypes[])Enum.GetValues(typeof(FormTypes)))
            {
                <option value="@formType">@formType</option>
            }
        </select>
        @if (viewModel.SelectedType != null)
        {
            <select @bind="viewModel.SelectedForm">
                @foreach (var form in Enum.GetValues(FormTypesRelations.FormTypesRelationsDict[Enum.Parse<FormTypes>(viewModel.SelectedType)]))
                {
                    <option value="@form">@form</option>
                }
            </select>
            @if (viewModel.SelectedForm != null)
            {
                <button name="BtnGenerateForm" @onclick="viewModel.BtnGenerateForm"> Generate Form </button>
            }
        }
    </span>

</div>
<div>
    <table style="font-size: 4px" height="500px" width="100%">

        @for (int i = 0; i < Length; i++)
        {
            <tr>
                @for (int j = 0; j < Width; j++)
                {
                    @if (GeneratedTable[j, i] == 0)
                    {
                        <td class="bg-dark">&nbsp;</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }

                }
            </tr>
        }
    </table>
</div>

@code
{
    public int[,] GeneratedTable
    {
        get { return viewModel.GeneratedTable; }
    }

    public int Length
    {
        get { return viewModel.Length; }
    }

    public int Width
    {
        get { return viewModel.Width; }
    }

    GameOfLifeViewModel viewModel;

    protected override void OnInitialized()
    {
        viewModel = new GameOfLifeViewModel(new Action(() => this.StateHasChanged()));
        viewModel.OnInit();
    }

}


