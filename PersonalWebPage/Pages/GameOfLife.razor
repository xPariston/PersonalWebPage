@page "/gameoflife"
@using ViewModels
@using GameOfLifeLibary.GameForms.GameOfLifeTypes

<h1>Game of Life</h1>

<div style="margin:4px" class="d-flex justify-content-center">
    <span class="border rounded bg-light" style="padding:6px">
        <label style="margin-right:10px">Population Simulation:</label>
        <span style="margin-right:10px">
            <span>Length:</span>
            <button name="BtnDecrementLength" @onclick="viewModel.BtnDecrementLength" type="button" class="btn btn-outline-primary">-</button>
            <span>@TempLength</span>
            <button name="BtnIncrementLength" @onclick="viewModel.BtnIncrementLength" type="button" class="btn btn-outline-primary">+</button>
        </span>
        <span style="margin-right:10px">
            <span>Width:</span>
            <button name="BtnDecrementWidth" @onclick="viewModel.BtnDecrementWidth" type="button" class="btn btn-outline-primary">-</button>
            <span>@TempWidth</span>
            <button name="BtnIncrementLength" @onclick="viewModel.BtnIncrementWidth" type="button" class="btn btn-outline-primary">+</button>
        </span>
        <span style="margin-right:10px">
            <span>Starting Points:</span>
            <button name="BtnDecrementStartingPoints" @onclick="viewModel.BtnDecrementStartingPopulation" type="button" class="btn btn-outline-primary">-</button>
            <span>@StartingPopulation</span>
            <button name="BtnIncrementStartingPoints" @onclick="viewModel.BtnIncrementStartingPopulation" type="button" class="btn btn-outline-primary">+</button>
        </span>
        <button name="BtnGeneratePopulation" @onclick="viewModel.BtnGeneratePopulationClick" type="button" class="btn btn-primary">Generate</button>
    </span>
</div>
<div style="margin:4px" class="d-flex justify-content-center">
    <span class="border rounded bg-light" style="padding:6px">
        <label style="margin-right:4px">Form Simulation: </label>
        <select @bind="viewModel.SelectedType" style="margin-right:4px">
            @if (viewModel.SelectedType == null)
            {
                <option>Choose...</option>
            }
            @foreach (FormTypes formType in (FormTypes[])Enum.GetValues(typeof(FormTypes)))
            {
                <option value="@formType">@formType</option>
            }
        </select>
        @if (viewModel.SelectedType != null)
        {
            <select @bind="viewModel.SelectedForm" style="margin-right:10px">
                @foreach (var form in Enum.GetValues(FormTypesRelations.FormTypesRelationsDict[Enum.Parse<FormTypes>(viewModel.SelectedType)]))
                {
                    <option value="@form">@form</option>
                }
            </select>
            @if (viewModel.SelectedForm != null)
            {
                <button name="BtnGenerateForm" @onclick="viewModel.BtnGenerateForm" type="button" class="btn btn-primary"> Generate Form </button>
            }
        }
    </span>
</div>
<div style="margin:7px" class="d-flex justify-content-center">
    <span class="border rounded bg-light" style="padding:6px">
        @if (viewModel.autoSimulate)
        {
            <button name="BtnStartSimulation" @onclick="viewModel.BtnStartSimulationClick" type="button" class="btn btn-primary active">►</button>
            <button name="BtnStepSimulation" @onclick="viewModel.BtnStepSimulationClick" type="button" class="btn btn-outline-primary">►|</button>
            <button name="BtnStopSimulation" @onclick="viewModel.BtnStopSimulationClick" type="button" class="btn btn-outline-primary">■</button>
        }
        else
        {
            <button name="BtnStartSimulation" @onclick="viewModel.BtnStartSimulationClick" type="button" class="btn btn-outline-primary">►</button>
            <button name="BtnStepSimulation" @onclick="viewModel.BtnStepSimulationClick" type="button" class="btn btn-outline-primary">►|</button>
            <button name="BtnStopSimulation" @onclick="viewModel.BtnStopSimulationClick" type="button" class="btn btn-primary active">■</button>
        }
    </span>
</div>
<div style="margin:7px" class="border border-warning rounded ">
    <table style="font-size: 4px" height="500px" width="100%">

        @for (int i = 0; i < Length; i++)
        {
            <tr>
                @for (int j = 0; j < Width; j++)
                {
                    @if (GeneratedTable[j, i] == 0)
                    {
                        <td class="bg-dark">&nbsp;</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }

                }
            </tr>
        }
    </table>
</div>

@code
{
    public int[,] GeneratedTable
    {
        get { return viewModel.GeneratedTable; }
    }

    public int Length
    {
        get { return viewModel.Length; }
    }

    public int Width
    {
        get { return viewModel.Width; }
    }

    public int TempLength
    {
        get { return viewModel.TempLength; }
    }

    public int TempWidth
    {
        get { return viewModel.TempWidth; }
    }


    public int StartingPopulation
    {
        get { return viewModel.StartingPopulation; }
    }

    GameOfLifeViewModel viewModel;

    protected override void OnInitialized()
    {
        viewModel = new GameOfLifeViewModel(new Action(() => this.StateHasChanged()));
    }

}


