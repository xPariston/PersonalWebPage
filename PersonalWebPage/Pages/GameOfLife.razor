@page "/gameoflife"
@using PersonalWebPage.GameOfLife
@using System.Linq
@using System.Diagnostics
@using System.Threading;

<h1>Game of Life</h1>
<span>
    <button name="BtnRestartSimulation" @onclick="BtnRestartSimulationClick">Restart</button>
    <button name="BtnStartSimulation" @onclick="BtnStartSimulationClick">Start</button>
    <button name="BtnStopSimulation" @onclick="BtnStopSimulationClick">Stop</button>
    <button name="BtnStepSimulation" @onclick="BtnStepSimulationClick">Step</button>


</span>

<table style="font-size: 4px" height="100%" width="100%">

    @for (int i = 0; i < Length; i++)
    {
        <tr>
            @for (int j = 0; j < Width; j++)
            {
                @if (GeneratedTable[j, i] == 0)
                {
                    <td>&nbsp;</td>
                }
                else
                {
                    <td class="bg-dark">&nbsp;</td>
                }

            }
        </tr>
    }
</table>

@code {

    public int Length = 80;
    public int Width = 150;
    private int StartingColony = 1000;
    private int[,] GeneratedTable;
    private Stopwatch stopwatch = new Stopwatch();
    private bool autoSimulate = false;
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        GeneratedTable = InitialSpawner.SpawnStarters(StartingColony, Length, Width);
    }

    private void BtnRestartSimulationClick()
    {
        GeneratedTable = InitialSpawner.SpawnStarters(StartingColony, Length, Width);
        autoSimulate = false;
    }

    private void BtnStopSimulationClick()
    {
        autoSimulate = false;
        stopwatch.Reset();
    }

    private void BtnStartSimulationClick()
    {
        autoSimulate = true;
        if (timer == null)
        {
            timer = new Timer(new TimerCallback(timer =>
            {
                if (autoSimulate == true)
                {
                    GenerateNextStep();
                    this.StateHasChanged();
                }
                else
                {
                    return;
                }
            }), null, 300, 300);
        }
    }


    private void BtnStepSimulationClick()
    {
        GenerateNextStep();
    }

    private void GenerateNextStep()
    {
        int[,] nextStepTable = new int[Width, Length];
        for (int i = 0; i < Width; i++)
        {
            for (int j = 0; j < Length; j++)
            {
                int calculatedNeighbours = CalculateNeighbours(GeneratedTable, new CoordinatePoint(i, j));
                nextStepTable[i, j] = ApplyRules(calculatedNeighbours, GeneratedTable[i, j]);
            }
        }

        GeneratedTable = nextStepTable;
    }

    private int ApplyRules(int countOfNeighbours, int initialState)
    {
        int returnValue = 0;

        if (initialState == 0 && countOfNeighbours == 3)
        {
            returnValue = 1;
        }

        if (initialState == 1 && countOfNeighbours >= 2 && countOfNeighbours <= 3)
        {
            returnValue = 1;
        }

        return returnValue;
    }

    private int CalculateNeighbours(int[,] activeTable, CoordinatePoint currentPosition)
    {
        int returnValue = 0;
        int countNeighbouCells = 0;

        for (int i = currentPosition.XPoint - 1; i < currentPosition.XPoint + 2; i++)
        {
            for (int j = currentPosition.YPoint - 1; j < currentPosition.YPoint + 2; j++)
            {
                if (i >= activeTable.GetLowerBound(0) && i < activeTable.GetUpperBound(0) &&
                    j >= activeTable.GetLowerBound(1) && j < activeTable.GetUpperBound(1))
                {
                    if (i != currentPosition.XPoint || j != currentPosition.YPoint)
                    {
                        returnValue += activeTable[i, j];
                    }
                }
            }
        }


        return returnValue;
    }
}


